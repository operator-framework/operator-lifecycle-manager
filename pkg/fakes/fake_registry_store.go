// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/operator-framework/operator-registry/pkg/registry"
)

type FakeQuery struct {
	GetBundleStub        func(context.Context, string, string, string) (string, error)
	getBundleMutex       sync.RWMutex
	getBundleArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getBundleReturns struct {
		result1 string
		result2 error
	}
	getBundleReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetBundleForChannelStub        func(context.Context, string, string) (string, error)
	getBundleForChannelMutex       sync.RWMutex
	getBundleForChannelArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	getBundleForChannelReturns struct {
		result1 string
		result2 error
	}
	getBundleForChannelReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetBundleThatProvidesStub        func(context.Context, string, string, string) (string, *registry.ChannelEntry, error)
	getBundleThatProvidesMutex       sync.RWMutex
	getBundleThatProvidesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getBundleThatProvidesReturns struct {
		result1 string
		result2 *registry.ChannelEntry
		result3 error
	}
	getBundleThatProvidesReturnsOnCall map[int]struct {
		result1 string
		result2 *registry.ChannelEntry
		result3 error
	}
	GetBundleThatReplacesStub        func(context.Context, string, string, string) (string, error)
	getBundleThatReplacesMutex       sync.RWMutex
	getBundleThatReplacesArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getBundleThatReplacesReturns struct {
		result1 string
		result2 error
	}
	getBundleThatReplacesReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetChannelEntriesThatProvideStub        func(context.Context, string, string, string) ([]*registry.ChannelEntry, error)
	getChannelEntriesThatProvideMutex       sync.RWMutex
	getChannelEntriesThatProvideArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getChannelEntriesThatProvideReturns struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	getChannelEntriesThatProvideReturnsOnCall map[int]struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	GetChannelEntriesThatReplaceStub        func(context.Context, string) ([]*registry.ChannelEntry, error)
	getChannelEntriesThatReplaceMutex       sync.RWMutex
	getChannelEntriesThatReplaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getChannelEntriesThatReplaceReturns struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	getChannelEntriesThatReplaceReturnsOnCall map[int]struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	GetLatestChannelEntriesThatProvideStub        func(context.Context, string, string, string) ([]*registry.ChannelEntry, error)
	getLatestChannelEntriesThatProvideMutex       sync.RWMutex
	getLatestChannelEntriesThatProvideArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}
	getLatestChannelEntriesThatProvideReturns struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	getLatestChannelEntriesThatProvideReturnsOnCall map[int]struct {
		result1 []*registry.ChannelEntry
		result2 error
	}
	GetPackageStub        func(context.Context, string) (*registry.PackageManifest, error)
	getPackageMutex       sync.RWMutex
	getPackageArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getPackageReturns struct {
		result1 *registry.PackageManifest
		result2 error
	}
	getPackageReturnsOnCall map[int]struct {
		result1 *registry.PackageManifest
		result2 error
	}
	ListPackagesStub        func(context.Context) ([]string, error)
	listPackagesMutex       sync.RWMutex
	listPackagesArgsForCall []struct {
		arg1 context.Context
	}
	listPackagesReturns struct {
		result1 []string
		result2 error
	}
	listPackagesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ListTablesStub        func(context.Context) ([]string, error)
	listTablesMutex       sync.RWMutex
	listTablesArgsForCall []struct {
		arg1 context.Context
	}
	listTablesReturns struct {
		result1 []string
		result2 error
	}
	listTablesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeQuery) GetBundle(arg1 context.Context, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.getBundleMutex.Lock()
	ret, specificReturn := fake.getBundleReturnsOnCall[len(fake.getBundleArgsForCall)]
	fake.getBundleArgsForCall = append(fake.getBundleArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetBundle", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBundleMutex.Unlock()
	if fake.GetBundleStub != nil {
		return fake.GetBundleStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetBundleCallCount() int {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	return len(fake.getBundleArgsForCall)
}

func (fake *FakeQuery) GetBundleCalls(stub func(context.Context, string, string, string) (string, error)) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = stub
}

func (fake *FakeQuery) GetBundleArgsForCall(i int) (context.Context, string, string, string) {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	argsForCall := fake.getBundleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) GetBundleReturns(result1 string, result2 error) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = nil
	fake.getBundleReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetBundleReturnsOnCall(i int, result1 string, result2 error) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = nil
	if fake.getBundleReturnsOnCall == nil {
		fake.getBundleReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getBundleReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetBundleForChannel(arg1 context.Context, arg2 string, arg3 string) (string, error) {
	fake.getBundleForChannelMutex.Lock()
	ret, specificReturn := fake.getBundleForChannelReturnsOnCall[len(fake.getBundleForChannelArgsForCall)]
	fake.getBundleForChannelArgsForCall = append(fake.getBundleForChannelArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBundleForChannel", []interface{}{arg1, arg2, arg3})
	fake.getBundleForChannelMutex.Unlock()
	if fake.GetBundleForChannelStub != nil {
		return fake.GetBundleForChannelStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleForChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetBundleForChannelCallCount() int {
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	return len(fake.getBundleForChannelArgsForCall)
}

func (fake *FakeQuery) GetBundleForChannelCalls(stub func(context.Context, string, string) (string, error)) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = stub
}

func (fake *FakeQuery) GetBundleForChannelArgsForCall(i int) (context.Context, string, string) {
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	argsForCall := fake.getBundleForChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeQuery) GetBundleForChannelReturns(result1 string, result2 error) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = nil
	fake.getBundleForChannelReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetBundleForChannelReturnsOnCall(i int, result1 string, result2 error) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = nil
	if fake.getBundleForChannelReturnsOnCall == nil {
		fake.getBundleForChannelReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getBundleForChannelReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetBundleThatProvides(arg1 context.Context, arg2 string, arg3 string, arg4 string) (string, *registry.ChannelEntry, error) {
	fake.getBundleThatProvidesMutex.Lock()
	ret, specificReturn := fake.getBundleThatProvidesReturnsOnCall[len(fake.getBundleThatProvidesArgsForCall)]
	fake.getBundleThatProvidesArgsForCall = append(fake.getBundleThatProvidesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetBundleThatProvides", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBundleThatProvidesMutex.Unlock()
	if fake.GetBundleThatProvidesStub != nil {
		return fake.GetBundleThatProvidesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getBundleThatProvidesReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeQuery) GetBundleThatProvidesCallCount() int {
	fake.getBundleThatProvidesMutex.RLock()
	defer fake.getBundleThatProvidesMutex.RUnlock()
	return len(fake.getBundleThatProvidesArgsForCall)
}

func (fake *FakeQuery) GetBundleThatProvidesCalls(stub func(context.Context, string, string, string) (string, *registry.ChannelEntry, error)) {
	fake.getBundleThatProvidesMutex.Lock()
	defer fake.getBundleThatProvidesMutex.Unlock()
	fake.GetBundleThatProvidesStub = stub
}

func (fake *FakeQuery) GetBundleThatProvidesArgsForCall(i int) (context.Context, string, string, string) {
	fake.getBundleThatProvidesMutex.RLock()
	defer fake.getBundleThatProvidesMutex.RUnlock()
	argsForCall := fake.getBundleThatProvidesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) GetBundleThatProvidesReturns(result1 string, result2 *registry.ChannelEntry, result3 error) {
	fake.getBundleThatProvidesMutex.Lock()
	defer fake.getBundleThatProvidesMutex.Unlock()
	fake.GetBundleThatProvidesStub = nil
	fake.getBundleThatProvidesReturns = struct {
		result1 string
		result2 *registry.ChannelEntry
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeQuery) GetBundleThatProvidesReturnsOnCall(i int, result1 string, result2 *registry.ChannelEntry, result3 error) {
	fake.getBundleThatProvidesMutex.Lock()
	defer fake.getBundleThatProvidesMutex.Unlock()
	fake.GetBundleThatProvidesStub = nil
	if fake.getBundleThatProvidesReturnsOnCall == nil {
		fake.getBundleThatProvidesReturnsOnCall = make(map[int]struct {
			result1 string
			result2 *registry.ChannelEntry
			result3 error
		})
	}
	fake.getBundleThatProvidesReturnsOnCall[i] = struct {
		result1 string
		result2 *registry.ChannelEntry
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeQuery) GetBundleThatReplaces(arg1 context.Context, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.getBundleThatReplacesMutex.Lock()
	ret, specificReturn := fake.getBundleThatReplacesReturnsOnCall[len(fake.getBundleThatReplacesArgsForCall)]
	fake.getBundleThatReplacesArgsForCall = append(fake.getBundleThatReplacesArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetBundleThatReplaces", []interface{}{arg1, arg2, arg3, arg4})
	fake.getBundleThatReplacesMutex.Unlock()
	if fake.GetBundleThatReplacesStub != nil {
		return fake.GetBundleThatReplacesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleThatReplacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetBundleThatReplacesCallCount() int {
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	return len(fake.getBundleThatReplacesArgsForCall)
}

func (fake *FakeQuery) GetBundleThatReplacesCalls(stub func(context.Context, string, string, string) (string, error)) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = stub
}

func (fake *FakeQuery) GetBundleThatReplacesArgsForCall(i int) (context.Context, string, string, string) {
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	argsForCall := fake.getBundleThatReplacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) GetBundleThatReplacesReturns(result1 string, result2 error) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = nil
	fake.getBundleThatReplacesReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetBundleThatReplacesReturnsOnCall(i int, result1 string, result2 error) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = nil
	if fake.getBundleThatReplacesReturnsOnCall == nil {
		fake.getBundleThatReplacesReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getBundleThatReplacesReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetChannelEntriesThatProvide(arg1 context.Context, arg2 string, arg3 string, arg4 string) ([]*registry.ChannelEntry, error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	ret, specificReturn := fake.getChannelEntriesThatProvideReturnsOnCall[len(fake.getChannelEntriesThatProvideArgsForCall)]
	fake.getChannelEntriesThatProvideArgsForCall = append(fake.getChannelEntriesThatProvideArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetChannelEntriesThatProvide", []interface{}{arg1, arg2, arg3, arg4})
	fake.getChannelEntriesThatProvideMutex.Unlock()
	if fake.GetChannelEntriesThatProvideStub != nil {
		return fake.GetChannelEntriesThatProvideStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getChannelEntriesThatProvideReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetChannelEntriesThatProvideCallCount() int {
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	return len(fake.getChannelEntriesThatProvideArgsForCall)
}

func (fake *FakeQuery) GetChannelEntriesThatProvideCalls(stub func(context.Context, string, string, string) ([]*registry.ChannelEntry, error)) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = stub
}

func (fake *FakeQuery) GetChannelEntriesThatProvideArgsForCall(i int) (context.Context, string, string, string) {
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	argsForCall := fake.getChannelEntriesThatProvideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) GetChannelEntriesThatProvideReturns(result1 []*registry.ChannelEntry, result2 error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = nil
	fake.getChannelEntriesThatProvideReturns = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetChannelEntriesThatProvideReturnsOnCall(i int, result1 []*registry.ChannelEntry, result2 error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = nil
	if fake.getChannelEntriesThatProvideReturnsOnCall == nil {
		fake.getChannelEntriesThatProvideReturnsOnCall = make(map[int]struct {
			result1 []*registry.ChannelEntry
			result2 error
		})
	}
	fake.getChannelEntriesThatProvideReturnsOnCall[i] = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetChannelEntriesThatReplace(arg1 context.Context, arg2 string) ([]*registry.ChannelEntry, error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	ret, specificReturn := fake.getChannelEntriesThatReplaceReturnsOnCall[len(fake.getChannelEntriesThatReplaceArgsForCall)]
	fake.getChannelEntriesThatReplaceArgsForCall = append(fake.getChannelEntriesThatReplaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetChannelEntriesThatReplace", []interface{}{arg1, arg2})
	fake.getChannelEntriesThatReplaceMutex.Unlock()
	if fake.GetChannelEntriesThatReplaceStub != nil {
		return fake.GetChannelEntriesThatReplaceStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getChannelEntriesThatReplaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetChannelEntriesThatReplaceCallCount() int {
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	return len(fake.getChannelEntriesThatReplaceArgsForCall)
}

func (fake *FakeQuery) GetChannelEntriesThatReplaceCalls(stub func(context.Context, string) ([]*registry.ChannelEntry, error)) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = stub
}

func (fake *FakeQuery) GetChannelEntriesThatReplaceArgsForCall(i int) (context.Context, string) {
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	argsForCall := fake.getChannelEntriesThatReplaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQuery) GetChannelEntriesThatReplaceReturns(result1 []*registry.ChannelEntry, result2 error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = nil
	fake.getChannelEntriesThatReplaceReturns = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetChannelEntriesThatReplaceReturnsOnCall(i int, result1 []*registry.ChannelEntry, result2 error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = nil
	if fake.getChannelEntriesThatReplaceReturnsOnCall == nil {
		fake.getChannelEntriesThatReplaceReturnsOnCall = make(map[int]struct {
			result1 []*registry.ChannelEntry
			result2 error
		})
	}
	fake.getChannelEntriesThatReplaceReturnsOnCall[i] = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvide(arg1 context.Context, arg2 string, arg3 string, arg4 string) ([]*registry.ChannelEntry, error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	ret, specificReturn := fake.getLatestChannelEntriesThatProvideReturnsOnCall[len(fake.getLatestChannelEntriesThatProvideArgsForCall)]
	fake.getLatestChannelEntriesThatProvideArgsForCall = append(fake.getLatestChannelEntriesThatProvideArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetLatestChannelEntriesThatProvide", []interface{}{arg1, arg2, arg3, arg4})
	fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	if fake.GetLatestChannelEntriesThatProvideStub != nil {
		return fake.GetLatestChannelEntriesThatProvideStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLatestChannelEntriesThatProvideReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvideCallCount() int {
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	return len(fake.getLatestChannelEntriesThatProvideArgsForCall)
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvideCalls(stub func(context.Context, string, string, string) ([]*registry.ChannelEntry, error)) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = stub
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvideArgsForCall(i int) (context.Context, string, string, string) {
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	argsForCall := fake.getLatestChannelEntriesThatProvideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvideReturns(result1 []*registry.ChannelEntry, result2 error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = nil
	fake.getLatestChannelEntriesThatProvideReturns = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetLatestChannelEntriesThatProvideReturnsOnCall(i int, result1 []*registry.ChannelEntry, result2 error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = nil
	if fake.getLatestChannelEntriesThatProvideReturnsOnCall == nil {
		fake.getLatestChannelEntriesThatProvideReturnsOnCall = make(map[int]struct {
			result1 []*registry.ChannelEntry
			result2 error
		})
	}
	fake.getLatestChannelEntriesThatProvideReturnsOnCall[i] = struct {
		result1 []*registry.ChannelEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetPackage(arg1 context.Context, arg2 string) (*registry.PackageManifest, error) {
	fake.getPackageMutex.Lock()
	ret, specificReturn := fake.getPackageReturnsOnCall[len(fake.getPackageArgsForCall)]
	fake.getPackageArgsForCall = append(fake.getPackageArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetPackage", []interface{}{arg1, arg2})
	fake.getPackageMutex.Unlock()
	if fake.GetPackageStub != nil {
		return fake.GetPackageStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPackageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) GetPackageCallCount() int {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	return len(fake.getPackageArgsForCall)
}

func (fake *FakeQuery) GetPackageCalls(stub func(context.Context, string) (*registry.PackageManifest, error)) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = stub
}

func (fake *FakeQuery) GetPackageArgsForCall(i int) (context.Context, string) {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	argsForCall := fake.getPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeQuery) GetPackageReturns(result1 *registry.PackageManifest, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	fake.getPackageReturns = struct {
		result1 *registry.PackageManifest
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) GetPackageReturnsOnCall(i int, result1 *registry.PackageManifest, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	if fake.getPackageReturnsOnCall == nil {
		fake.getPackageReturnsOnCall = make(map[int]struct {
			result1 *registry.PackageManifest
			result2 error
		})
	}
	fake.getPackageReturnsOnCall[i] = struct {
		result1 *registry.PackageManifest
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) ListPackages(arg1 context.Context) ([]string, error) {
	fake.listPackagesMutex.Lock()
	ret, specificReturn := fake.listPackagesReturnsOnCall[len(fake.listPackagesArgsForCall)]
	fake.listPackagesArgsForCall = append(fake.listPackagesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("ListPackages", []interface{}{arg1})
	fake.listPackagesMutex.Unlock()
	if fake.ListPackagesStub != nil {
		return fake.ListPackagesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPackagesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) ListPackagesCallCount() int {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	return len(fake.listPackagesArgsForCall)
}

func (fake *FakeQuery) ListPackagesCalls(stub func(context.Context) ([]string, error)) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = stub
}

func (fake *FakeQuery) ListPackagesArgsForCall(i int) context.Context {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	argsForCall := fake.listPackagesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuery) ListPackagesReturns(result1 []string, result2 error) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = nil
	fake.listPackagesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) ListPackagesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = nil
	if fake.listPackagesReturnsOnCall == nil {
		fake.listPackagesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listPackagesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) ListTables(arg1 context.Context) ([]string, error) {
	fake.listTablesMutex.Lock()
	ret, specificReturn := fake.listTablesReturnsOnCall[len(fake.listTablesArgsForCall)]
	fake.listTablesArgsForCall = append(fake.listTablesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("ListTables", []interface{}{arg1})
	fake.listTablesMutex.Unlock()
	if fake.ListTablesStub != nil {
		return fake.ListTablesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTablesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeQuery) ListTablesCallCount() int {
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	return len(fake.listTablesArgsForCall)
}

func (fake *FakeQuery) ListTablesCalls(stub func(context.Context) ([]string, error)) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = stub
}

func (fake *FakeQuery) ListTablesArgsForCall(i int) context.Context {
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	argsForCall := fake.listTablesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeQuery) ListTablesReturns(result1 []string, result2 error) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = nil
	fake.listTablesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) ListTablesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listTablesMutex.Lock()
	defer fake.listTablesMutex.Unlock()
	fake.ListTablesStub = nil
	if fake.listTablesReturnsOnCall == nil {
		fake.listTablesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listTablesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeQuery) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	fake.getBundleThatProvidesMutex.RLock()
	defer fake.getBundleThatProvidesMutex.RUnlock()
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	fake.listTablesMutex.RLock()
	defer fake.listTablesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeQuery) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Query = new(FakeQuery)
