// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	"github.com/operator-framework/operator-lifecycle-manager/pkg/controller/install"
)

type FakeStrategyInstaller struct {
	CertsRotateAtStub        func() time.Time
	certsRotateAtMutex       sync.RWMutex
	certsRotateAtArgsForCall []struct {
	}
	certsRotateAtReturns struct {
		result1 time.Time
	}
	certsRotateAtReturnsOnCall map[int]struct {
		result1 time.Time
	}
	CertsRotatedStub        func() bool
	certsRotatedMutex       sync.RWMutex
	certsRotatedArgsForCall []struct {
	}
	certsRotatedReturns struct {
		result1 bool
	}
	certsRotatedReturnsOnCall map[int]struct {
		result1 bool
	}
	CheckInstalledStub        func(install.Strategy) (bool, error)
	checkInstalledMutex       sync.RWMutex
	checkInstalledArgsForCall []struct {
		arg1 install.Strategy
	}
	checkInstalledReturns struct {
		result1 bool
		result2 error
	}
	checkInstalledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	InstallStub        func(install.Strategy) error
	installMutex       sync.RWMutex
	installArgsForCall []struct {
		arg1 install.Strategy
	}
	installReturns struct {
		result1 error
	}
	installReturnsOnCall map[int]struct {
		result1 error
	}
	ShouldRotateCertsStub        func(install.Strategy) (bool, error)
	shouldRotateCertsMutex       sync.RWMutex
	shouldRotateCertsArgsForCall []struct {
		arg1 install.Strategy
	}
	shouldRotateCertsReturns struct {
		result1 bool
		result2 error
	}
	shouldRotateCertsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStrategyInstaller) CertsRotateAt() time.Time {
	fake.certsRotateAtMutex.Lock()
	ret, specificReturn := fake.certsRotateAtReturnsOnCall[len(fake.certsRotateAtArgsForCall)]
	fake.certsRotateAtArgsForCall = append(fake.certsRotateAtArgsForCall, struct {
	}{})
	stub := fake.CertsRotateAtStub
	fakeReturns := fake.certsRotateAtReturns
	fake.recordInvocation("CertsRotateAt", []interface{}{})
	fake.certsRotateAtMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStrategyInstaller) CertsRotateAtCallCount() int {
	fake.certsRotateAtMutex.RLock()
	defer fake.certsRotateAtMutex.RUnlock()
	return len(fake.certsRotateAtArgsForCall)
}

func (fake *FakeStrategyInstaller) CertsRotateAtCalls(stub func() time.Time) {
	fake.certsRotateAtMutex.Lock()
	defer fake.certsRotateAtMutex.Unlock()
	fake.CertsRotateAtStub = stub
}

func (fake *FakeStrategyInstaller) CertsRotateAtReturns(result1 time.Time) {
	fake.certsRotateAtMutex.Lock()
	defer fake.certsRotateAtMutex.Unlock()
	fake.CertsRotateAtStub = nil
	fake.certsRotateAtReturns = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeStrategyInstaller) CertsRotateAtReturnsOnCall(i int, result1 time.Time) {
	fake.certsRotateAtMutex.Lock()
	defer fake.certsRotateAtMutex.Unlock()
	fake.CertsRotateAtStub = nil
	if fake.certsRotateAtReturnsOnCall == nil {
		fake.certsRotateAtReturnsOnCall = make(map[int]struct {
			result1 time.Time
		})
	}
	fake.certsRotateAtReturnsOnCall[i] = struct {
		result1 time.Time
	}{result1}
}

func (fake *FakeStrategyInstaller) CertsRotated() bool {
	fake.certsRotatedMutex.Lock()
	ret, specificReturn := fake.certsRotatedReturnsOnCall[len(fake.certsRotatedArgsForCall)]
	fake.certsRotatedArgsForCall = append(fake.certsRotatedArgsForCall, struct {
	}{})
	stub := fake.CertsRotatedStub
	fakeReturns := fake.certsRotatedReturns
	fake.recordInvocation("CertsRotated", []interface{}{})
	fake.certsRotatedMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStrategyInstaller) CertsRotatedCallCount() int {
	fake.certsRotatedMutex.RLock()
	defer fake.certsRotatedMutex.RUnlock()
	return len(fake.certsRotatedArgsForCall)
}

func (fake *FakeStrategyInstaller) CertsRotatedCalls(stub func() bool) {
	fake.certsRotatedMutex.Lock()
	defer fake.certsRotatedMutex.Unlock()
	fake.CertsRotatedStub = stub
}

func (fake *FakeStrategyInstaller) CertsRotatedReturns(result1 bool) {
	fake.certsRotatedMutex.Lock()
	defer fake.certsRotatedMutex.Unlock()
	fake.CertsRotatedStub = nil
	fake.certsRotatedReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStrategyInstaller) CertsRotatedReturnsOnCall(i int, result1 bool) {
	fake.certsRotatedMutex.Lock()
	defer fake.certsRotatedMutex.Unlock()
	fake.CertsRotatedStub = nil
	if fake.certsRotatedReturnsOnCall == nil {
		fake.certsRotatedReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.certsRotatedReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeStrategyInstaller) CheckInstalled(arg1 install.Strategy) (bool, error) {
	fake.checkInstalledMutex.Lock()
	ret, specificReturn := fake.checkInstalledReturnsOnCall[len(fake.checkInstalledArgsForCall)]
	fake.checkInstalledArgsForCall = append(fake.checkInstalledArgsForCall, struct {
		arg1 install.Strategy
	}{arg1})
	stub := fake.CheckInstalledStub
	fakeReturns := fake.checkInstalledReturns
	fake.recordInvocation("CheckInstalled", []interface{}{arg1})
	fake.checkInstalledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStrategyInstaller) CheckInstalledCallCount() int {
	fake.checkInstalledMutex.RLock()
	defer fake.checkInstalledMutex.RUnlock()
	return len(fake.checkInstalledArgsForCall)
}

func (fake *FakeStrategyInstaller) CheckInstalledCalls(stub func(install.Strategy) (bool, error)) {
	fake.checkInstalledMutex.Lock()
	defer fake.checkInstalledMutex.Unlock()
	fake.CheckInstalledStub = stub
}

func (fake *FakeStrategyInstaller) CheckInstalledArgsForCall(i int) install.Strategy {
	fake.checkInstalledMutex.RLock()
	defer fake.checkInstalledMutex.RUnlock()
	argsForCall := fake.checkInstalledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStrategyInstaller) CheckInstalledReturns(result1 bool, result2 error) {
	fake.checkInstalledMutex.Lock()
	defer fake.checkInstalledMutex.Unlock()
	fake.CheckInstalledStub = nil
	fake.checkInstalledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStrategyInstaller) CheckInstalledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkInstalledMutex.Lock()
	defer fake.checkInstalledMutex.Unlock()
	fake.CheckInstalledStub = nil
	if fake.checkInstalledReturnsOnCall == nil {
		fake.checkInstalledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkInstalledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStrategyInstaller) Install(arg1 install.Strategy) error {
	fake.installMutex.Lock()
	ret, specificReturn := fake.installReturnsOnCall[len(fake.installArgsForCall)]
	fake.installArgsForCall = append(fake.installArgsForCall, struct {
		arg1 install.Strategy
	}{arg1})
	stub := fake.InstallStub
	fakeReturns := fake.installReturns
	fake.recordInvocation("Install", []interface{}{arg1})
	fake.installMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStrategyInstaller) InstallCallCount() int {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	return len(fake.installArgsForCall)
}

func (fake *FakeStrategyInstaller) InstallCalls(stub func(install.Strategy) error) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = stub
}

func (fake *FakeStrategyInstaller) InstallArgsForCall(i int) install.Strategy {
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	argsForCall := fake.installArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStrategyInstaller) InstallReturns(result1 error) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = nil
	fake.installReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStrategyInstaller) InstallReturnsOnCall(i int, result1 error) {
	fake.installMutex.Lock()
	defer fake.installMutex.Unlock()
	fake.InstallStub = nil
	if fake.installReturnsOnCall == nil {
		fake.installReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.installReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStrategyInstaller) ShouldRotateCerts(arg1 install.Strategy) (bool, error) {
	fake.shouldRotateCertsMutex.Lock()
	ret, specificReturn := fake.shouldRotateCertsReturnsOnCall[len(fake.shouldRotateCertsArgsForCall)]
	fake.shouldRotateCertsArgsForCall = append(fake.shouldRotateCertsArgsForCall, struct {
		arg1 install.Strategy
	}{arg1})
	stub := fake.ShouldRotateCertsStub
	fakeReturns := fake.shouldRotateCertsReturns
	fake.recordInvocation("ShouldRotateCerts", []interface{}{arg1})
	fake.shouldRotateCertsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStrategyInstaller) ShouldRotateCertsCallCount() int {
	fake.shouldRotateCertsMutex.RLock()
	defer fake.shouldRotateCertsMutex.RUnlock()
	return len(fake.shouldRotateCertsArgsForCall)
}

func (fake *FakeStrategyInstaller) ShouldRotateCertsCalls(stub func(install.Strategy) (bool, error)) {
	fake.shouldRotateCertsMutex.Lock()
	defer fake.shouldRotateCertsMutex.Unlock()
	fake.ShouldRotateCertsStub = stub
}

func (fake *FakeStrategyInstaller) ShouldRotateCertsArgsForCall(i int) install.Strategy {
	fake.shouldRotateCertsMutex.RLock()
	defer fake.shouldRotateCertsMutex.RUnlock()
	argsForCall := fake.shouldRotateCertsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStrategyInstaller) ShouldRotateCertsReturns(result1 bool, result2 error) {
	fake.shouldRotateCertsMutex.Lock()
	defer fake.shouldRotateCertsMutex.Unlock()
	fake.ShouldRotateCertsStub = nil
	fake.shouldRotateCertsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStrategyInstaller) ShouldRotateCertsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.shouldRotateCertsMutex.Lock()
	defer fake.shouldRotateCertsMutex.Unlock()
	fake.ShouldRotateCertsStub = nil
	if fake.shouldRotateCertsReturnsOnCall == nil {
		fake.shouldRotateCertsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.shouldRotateCertsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeStrategyInstaller) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.certsRotateAtMutex.RLock()
	defer fake.certsRotateAtMutex.RUnlock()
	fake.certsRotatedMutex.RLock()
	defer fake.certsRotatedMutex.RUnlock()
	fake.checkInstalledMutex.RLock()
	defer fake.checkInstalledMutex.RUnlock()
	fake.installMutex.RLock()
	defer fake.installMutex.RUnlock()
	fake.shouldRotateCertsMutex.RLock()
	defer fake.shouldRotateCertsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStrategyInstaller) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ install.StrategyInstaller = new(FakeStrategyInstaller)
