// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	v1alpha1 "github.com/operator-framework/operator-lifecycle-manager/pkg/api/apis/operators/v1alpha1"
	reconciler "github.com/operator-framework/operator-lifecycle-manager/pkg/controller/registry/reconciler"
)

type FakeReconcilerReconciler struct {
	ReconcilerForSourceTypeStub        func(v1alpha1.SourceType) reconciler.RegistryReconciler
	reconcilerForSourceTypeMutex       sync.RWMutex
	reconcilerForSourceTypeArgsForCall []struct {
		arg1 v1alpha1.SourceType
	}
	reconcilerForSourceTypeReturns struct {
		result1 reconciler.RegistryReconciler
	}
	reconcilerForSourceTypeReturnsOnCall map[int]struct {
		result1 reconciler.RegistryReconciler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceType(arg1 v1alpha1.SourceType) reconciler.RegistryReconciler {
	fake.reconcilerForSourceTypeMutex.Lock()
	ret, specificReturn := fake.reconcilerForSourceTypeReturnsOnCall[len(fake.reconcilerForSourceTypeArgsForCall)]
	fake.reconcilerForSourceTypeArgsForCall = append(fake.reconcilerForSourceTypeArgsForCall, struct {
		arg1 v1alpha1.SourceType
	}{arg1})
	fake.recordInvocation("ReconcilerForSourceType", []interface{}{arg1})
	fake.reconcilerForSourceTypeMutex.Unlock()
	if fake.ReconcilerForSourceTypeStub != nil {
		return fake.ReconcilerForSourceTypeStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reconcilerForSourceTypeReturns
	return fakeReturns.result1
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceTypeCallCount() int {
	fake.reconcilerForSourceTypeMutex.RLock()
	defer fake.reconcilerForSourceTypeMutex.RUnlock()
	return len(fake.reconcilerForSourceTypeArgsForCall)
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceTypeCalls(stub func(v1alpha1.SourceType) reconciler.RegistryReconciler) {
	fake.reconcilerForSourceTypeMutex.Lock()
	defer fake.reconcilerForSourceTypeMutex.Unlock()
	fake.ReconcilerForSourceTypeStub = stub
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceTypeArgsForCall(i int) v1alpha1.SourceType {
	fake.reconcilerForSourceTypeMutex.RLock()
	defer fake.reconcilerForSourceTypeMutex.RUnlock()
	argsForCall := fake.reconcilerForSourceTypeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceTypeReturns(result1 reconciler.RegistryReconciler) {
	fake.reconcilerForSourceTypeMutex.Lock()
	defer fake.reconcilerForSourceTypeMutex.Unlock()
	fake.ReconcilerForSourceTypeStub = nil
	fake.reconcilerForSourceTypeReturns = struct {
		result1 reconciler.RegistryReconciler
	}{result1}
}

func (fake *FakeReconcilerReconciler) ReconcilerForSourceTypeReturnsOnCall(i int, result1 reconciler.RegistryReconciler) {
	fake.reconcilerForSourceTypeMutex.Lock()
	defer fake.reconcilerForSourceTypeMutex.Unlock()
	fake.ReconcilerForSourceTypeStub = nil
	if fake.reconcilerForSourceTypeReturnsOnCall == nil {
		fake.reconcilerForSourceTypeReturnsOnCall = make(map[int]struct {
			result1 reconciler.RegistryReconciler
		})
	}
	fake.reconcilerForSourceTypeReturnsOnCall[i] = struct {
		result1 reconciler.RegistryReconciler
	}{result1}
}

func (fake *FakeReconcilerReconciler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reconcilerForSourceTypeMutex.RLock()
	defer fake.reconcilerForSourceTypeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReconcilerReconciler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.ReconcilerReconciler = new(FakeReconcilerReconciler)
