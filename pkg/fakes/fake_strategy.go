// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/operator-framework/operator-lifecycle-manager/pkg/controller/install"
)

type FakeStrategy struct {
	GetStrategyNameStub        func() string
	getStrategyNameMutex       sync.RWMutex
	getStrategyNameArgsForCall []struct {
	}
	getStrategyNameReturns struct {
		result1 string
	}
	getStrategyNameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStrategy) GetStrategyName() string {
	fake.getStrategyNameMutex.Lock()
	ret, specificReturn := fake.getStrategyNameReturnsOnCall[len(fake.getStrategyNameArgsForCall)]
	fake.getStrategyNameArgsForCall = append(fake.getStrategyNameArgsForCall, struct {
	}{})
	fake.recordInvocation("GetStrategyName", []interface{}{})
	fake.getStrategyNameMutex.Unlock()
	if fake.GetStrategyNameStub != nil {
		return fake.GetStrategyNameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getStrategyNameReturns
	return fakeReturns.result1
}

func (fake *FakeStrategy) GetStrategyNameCallCount() int {
	fake.getStrategyNameMutex.RLock()
	defer fake.getStrategyNameMutex.RUnlock()
	return len(fake.getStrategyNameArgsForCall)
}

func (fake *FakeStrategy) GetStrategyNameCalls(stub func() string) {
	fake.getStrategyNameMutex.Lock()
	defer fake.getStrategyNameMutex.Unlock()
	fake.GetStrategyNameStub = stub
}

func (fake *FakeStrategy) GetStrategyNameReturns(result1 string) {
	fake.getStrategyNameMutex.Lock()
	defer fake.getStrategyNameMutex.Unlock()
	fake.GetStrategyNameStub = nil
	fake.getStrategyNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeStrategy) GetStrategyNameReturnsOnCall(i int, result1 string) {
	fake.getStrategyNameMutex.Lock()
	defer fake.getStrategyNameMutex.Unlock()
	fake.GetStrategyNameStub = nil
	if fake.getStrategyNameReturnsOnCall == nil {
		fake.getStrategyNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getStrategyNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeStrategy) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getStrategyNameMutex.RLock()
	defer fake.getStrategyNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStrategy) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ install.Strategy = new(FakeStrategy)
