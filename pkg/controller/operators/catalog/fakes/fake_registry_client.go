// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/operator-framework/operator-registry/pkg/api"
	"google.golang.org/grpc"
)

type FakeRegistryClient struct {
	GetBundleStub        func(context.Context, *api.GetBundleRequest, ...grpc.CallOption) (*api.Bundle, error)
	getBundleMutex       sync.RWMutex
	getBundleArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetBundleRequest
		arg3 []grpc.CallOption
	}
	getBundleReturns struct {
		result1 *api.Bundle
		result2 error
	}
	getBundleReturnsOnCall map[int]struct {
		result1 *api.Bundle
		result2 error
	}
	GetBundleForChannelStub        func(context.Context, *api.GetBundleInChannelRequest, ...grpc.CallOption) (*api.Bundle, error)
	getBundleForChannelMutex       sync.RWMutex
	getBundleForChannelArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetBundleInChannelRequest
		arg3 []grpc.CallOption
	}
	getBundleForChannelReturns struct {
		result1 *api.Bundle
		result2 error
	}
	getBundleForChannelReturnsOnCall map[int]struct {
		result1 *api.Bundle
		result2 error
	}
	GetBundleThatReplacesStub        func(context.Context, *api.GetReplacementRequest, ...grpc.CallOption) (*api.Bundle, error)
	getBundleThatReplacesMutex       sync.RWMutex
	getBundleThatReplacesArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetReplacementRequest
		arg3 []grpc.CallOption
	}
	getBundleThatReplacesReturns struct {
		result1 *api.Bundle
		result2 error
	}
	getBundleThatReplacesReturnsOnCall map[int]struct {
		result1 *api.Bundle
		result2 error
	}
	GetChannelEntriesThatProvideStub        func(context.Context, *api.GetAllProvidersRequest, ...grpc.CallOption) (api.Registry_GetChannelEntriesThatProvideClient, error)
	getChannelEntriesThatProvideMutex       sync.RWMutex
	getChannelEntriesThatProvideArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetAllProvidersRequest
		arg3 []grpc.CallOption
	}
	getChannelEntriesThatProvideReturns struct {
		result1 api.Registry_GetChannelEntriesThatProvideClient
		result2 error
	}
	getChannelEntriesThatProvideReturnsOnCall map[int]struct {
		result1 api.Registry_GetChannelEntriesThatProvideClient
		result2 error
	}
	GetChannelEntriesThatReplaceStub        func(context.Context, *api.GetAllReplacementsRequest, ...grpc.CallOption) (api.Registry_GetChannelEntriesThatReplaceClient, error)
	getChannelEntriesThatReplaceMutex       sync.RWMutex
	getChannelEntriesThatReplaceArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetAllReplacementsRequest
		arg3 []grpc.CallOption
	}
	getChannelEntriesThatReplaceReturns struct {
		result1 api.Registry_GetChannelEntriesThatReplaceClient
		result2 error
	}
	getChannelEntriesThatReplaceReturnsOnCall map[int]struct {
		result1 api.Registry_GetChannelEntriesThatReplaceClient
		result2 error
	}
	GetDefaultBundleThatProvidesStub        func(context.Context, *api.GetDefaultProviderRequest, ...grpc.CallOption) (*api.Bundle, error)
	getDefaultBundleThatProvidesMutex       sync.RWMutex
	getDefaultBundleThatProvidesArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetDefaultProviderRequest
		arg3 []grpc.CallOption
	}
	getDefaultBundleThatProvidesReturns struct {
		result1 *api.Bundle
		result2 error
	}
	getDefaultBundleThatProvidesReturnsOnCall map[int]struct {
		result1 *api.Bundle
		result2 error
	}
	GetLatestChannelEntriesThatProvideStub        func(context.Context, *api.GetLatestProvidersRequest, ...grpc.CallOption) (api.Registry_GetLatestChannelEntriesThatProvideClient, error)
	getLatestChannelEntriesThatProvideMutex       sync.RWMutex
	getLatestChannelEntriesThatProvideArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetLatestProvidersRequest
		arg3 []grpc.CallOption
	}
	getLatestChannelEntriesThatProvideReturns struct {
		result1 api.Registry_GetLatestChannelEntriesThatProvideClient
		result2 error
	}
	getLatestChannelEntriesThatProvideReturnsOnCall map[int]struct {
		result1 api.Registry_GetLatestChannelEntriesThatProvideClient
		result2 error
	}
	GetPackageStub        func(context.Context, *api.GetPackageRequest, ...grpc.CallOption) (*api.Package, error)
	getPackageMutex       sync.RWMutex
	getPackageArgsForCall []struct {
		arg1 context.Context
		arg2 *api.GetPackageRequest
		arg3 []grpc.CallOption
	}
	getPackageReturns struct {
		result1 *api.Package
		result2 error
	}
	getPackageReturnsOnCall map[int]struct {
		result1 *api.Package
		result2 error
	}
	ListBundlesStub        func(context.Context, *api.ListBundlesRequest, ...grpc.CallOption) (api.Registry_ListBundlesClient, error)
	listBundlesMutex       sync.RWMutex
	listBundlesArgsForCall []struct {
		arg1 context.Context
		arg2 *api.ListBundlesRequest
		arg3 []grpc.CallOption
	}
	listBundlesReturns struct {
		result1 api.Registry_ListBundlesClient
		result2 error
	}
	listBundlesReturnsOnCall map[int]struct {
		result1 api.Registry_ListBundlesClient
		result2 error
	}
	ListPackagesStub        func(context.Context, *api.ListPackageRequest, ...grpc.CallOption) (api.Registry_ListPackagesClient, error)
	listPackagesMutex       sync.RWMutex
	listPackagesArgsForCall []struct {
		arg1 context.Context
		arg2 *api.ListPackageRequest
		arg3 []grpc.CallOption
	}
	listPackagesReturns struct {
		result1 api.Registry_ListPackagesClient
		result2 error
	}
	listPackagesReturnsOnCall map[int]struct {
		result1 api.Registry_ListPackagesClient
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRegistryClient) GetBundle(arg1 context.Context, arg2 *api.GetBundleRequest, arg3 ...grpc.CallOption) (*api.Bundle, error) {
	fake.getBundleMutex.Lock()
	ret, specificReturn := fake.getBundleReturnsOnCall[len(fake.getBundleArgsForCall)]
	fake.getBundleArgsForCall = append(fake.getBundleArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetBundleRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBundle", []interface{}{arg1, arg2, arg3})
	fake.getBundleMutex.Unlock()
	if fake.GetBundleStub != nil {
		return fake.GetBundleStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetBundleCallCount() int {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	return len(fake.getBundleArgsForCall)
}

func (fake *FakeRegistryClient) GetBundleCalls(stub func(context.Context, *api.GetBundleRequest, ...grpc.CallOption) (*api.Bundle, error)) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = stub
}

func (fake *FakeRegistryClient) GetBundleArgsForCall(i int) (context.Context, *api.GetBundleRequest, []grpc.CallOption) {
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	argsForCall := fake.getBundleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetBundleReturns(result1 *api.Bundle, result2 error) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = nil
	fake.getBundleReturns = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetBundleReturnsOnCall(i int, result1 *api.Bundle, result2 error) {
	fake.getBundleMutex.Lock()
	defer fake.getBundleMutex.Unlock()
	fake.GetBundleStub = nil
	if fake.getBundleReturnsOnCall == nil {
		fake.getBundleReturnsOnCall = make(map[int]struct {
			result1 *api.Bundle
			result2 error
		})
	}
	fake.getBundleReturnsOnCall[i] = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetBundleForChannel(arg1 context.Context, arg2 *api.GetBundleInChannelRequest, arg3 ...grpc.CallOption) (*api.Bundle, error) {
	fake.getBundleForChannelMutex.Lock()
	ret, specificReturn := fake.getBundleForChannelReturnsOnCall[len(fake.getBundleForChannelArgsForCall)]
	fake.getBundleForChannelArgsForCall = append(fake.getBundleForChannelArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetBundleInChannelRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBundleForChannel", []interface{}{arg1, arg2, arg3})
	fake.getBundleForChannelMutex.Unlock()
	if fake.GetBundleForChannelStub != nil {
		return fake.GetBundleForChannelStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleForChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetBundleForChannelCallCount() int {
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	return len(fake.getBundleForChannelArgsForCall)
}

func (fake *FakeRegistryClient) GetBundleForChannelCalls(stub func(context.Context, *api.GetBundleInChannelRequest, ...grpc.CallOption) (*api.Bundle, error)) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = stub
}

func (fake *FakeRegistryClient) GetBundleForChannelArgsForCall(i int) (context.Context, *api.GetBundleInChannelRequest, []grpc.CallOption) {
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	argsForCall := fake.getBundleForChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetBundleForChannelReturns(result1 *api.Bundle, result2 error) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = nil
	fake.getBundleForChannelReturns = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetBundleForChannelReturnsOnCall(i int, result1 *api.Bundle, result2 error) {
	fake.getBundleForChannelMutex.Lock()
	defer fake.getBundleForChannelMutex.Unlock()
	fake.GetBundleForChannelStub = nil
	if fake.getBundleForChannelReturnsOnCall == nil {
		fake.getBundleForChannelReturnsOnCall = make(map[int]struct {
			result1 *api.Bundle
			result2 error
		})
	}
	fake.getBundleForChannelReturnsOnCall[i] = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetBundleThatReplaces(arg1 context.Context, arg2 *api.GetReplacementRequest, arg3 ...grpc.CallOption) (*api.Bundle, error) {
	fake.getBundleThatReplacesMutex.Lock()
	ret, specificReturn := fake.getBundleThatReplacesReturnsOnCall[len(fake.getBundleThatReplacesArgsForCall)]
	fake.getBundleThatReplacesArgsForCall = append(fake.getBundleThatReplacesArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetReplacementRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetBundleThatReplaces", []interface{}{arg1, arg2, arg3})
	fake.getBundleThatReplacesMutex.Unlock()
	if fake.GetBundleThatReplacesStub != nil {
		return fake.GetBundleThatReplacesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBundleThatReplacesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetBundleThatReplacesCallCount() int {
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	return len(fake.getBundleThatReplacesArgsForCall)
}

func (fake *FakeRegistryClient) GetBundleThatReplacesCalls(stub func(context.Context, *api.GetReplacementRequest, ...grpc.CallOption) (*api.Bundle, error)) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = stub
}

func (fake *FakeRegistryClient) GetBundleThatReplacesArgsForCall(i int) (context.Context, *api.GetReplacementRequest, []grpc.CallOption) {
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	argsForCall := fake.getBundleThatReplacesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetBundleThatReplacesReturns(result1 *api.Bundle, result2 error) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = nil
	fake.getBundleThatReplacesReturns = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetBundleThatReplacesReturnsOnCall(i int, result1 *api.Bundle, result2 error) {
	fake.getBundleThatReplacesMutex.Lock()
	defer fake.getBundleThatReplacesMutex.Unlock()
	fake.GetBundleThatReplacesStub = nil
	if fake.getBundleThatReplacesReturnsOnCall == nil {
		fake.getBundleThatReplacesReturnsOnCall = make(map[int]struct {
			result1 *api.Bundle
			result2 error
		})
	}
	fake.getBundleThatReplacesReturnsOnCall[i] = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvide(arg1 context.Context, arg2 *api.GetAllProvidersRequest, arg3 ...grpc.CallOption) (api.Registry_GetChannelEntriesThatProvideClient, error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	ret, specificReturn := fake.getChannelEntriesThatProvideReturnsOnCall[len(fake.getChannelEntriesThatProvideArgsForCall)]
	fake.getChannelEntriesThatProvideArgsForCall = append(fake.getChannelEntriesThatProvideArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetAllProvidersRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetChannelEntriesThatProvide", []interface{}{arg1, arg2, arg3})
	fake.getChannelEntriesThatProvideMutex.Unlock()
	if fake.GetChannelEntriesThatProvideStub != nil {
		return fake.GetChannelEntriesThatProvideStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getChannelEntriesThatProvideReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvideCallCount() int {
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	return len(fake.getChannelEntriesThatProvideArgsForCall)
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvideCalls(stub func(context.Context, *api.GetAllProvidersRequest, ...grpc.CallOption) (api.Registry_GetChannelEntriesThatProvideClient, error)) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = stub
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvideArgsForCall(i int) (context.Context, *api.GetAllProvidersRequest, []grpc.CallOption) {
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	argsForCall := fake.getChannelEntriesThatProvideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvideReturns(result1 api.Registry_GetChannelEntriesThatProvideClient, result2 error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = nil
	fake.getChannelEntriesThatProvideReturns = struct {
		result1 api.Registry_GetChannelEntriesThatProvideClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetChannelEntriesThatProvideReturnsOnCall(i int, result1 api.Registry_GetChannelEntriesThatProvideClient, result2 error) {
	fake.getChannelEntriesThatProvideMutex.Lock()
	defer fake.getChannelEntriesThatProvideMutex.Unlock()
	fake.GetChannelEntriesThatProvideStub = nil
	if fake.getChannelEntriesThatProvideReturnsOnCall == nil {
		fake.getChannelEntriesThatProvideReturnsOnCall = make(map[int]struct {
			result1 api.Registry_GetChannelEntriesThatProvideClient
			result2 error
		})
	}
	fake.getChannelEntriesThatProvideReturnsOnCall[i] = struct {
		result1 api.Registry_GetChannelEntriesThatProvideClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplace(arg1 context.Context, arg2 *api.GetAllReplacementsRequest, arg3 ...grpc.CallOption) (api.Registry_GetChannelEntriesThatReplaceClient, error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	ret, specificReturn := fake.getChannelEntriesThatReplaceReturnsOnCall[len(fake.getChannelEntriesThatReplaceArgsForCall)]
	fake.getChannelEntriesThatReplaceArgsForCall = append(fake.getChannelEntriesThatReplaceArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetAllReplacementsRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetChannelEntriesThatReplace", []interface{}{arg1, arg2, arg3})
	fake.getChannelEntriesThatReplaceMutex.Unlock()
	if fake.GetChannelEntriesThatReplaceStub != nil {
		return fake.GetChannelEntriesThatReplaceStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getChannelEntriesThatReplaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplaceCallCount() int {
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	return len(fake.getChannelEntriesThatReplaceArgsForCall)
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplaceCalls(stub func(context.Context, *api.GetAllReplacementsRequest, ...grpc.CallOption) (api.Registry_GetChannelEntriesThatReplaceClient, error)) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = stub
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplaceArgsForCall(i int) (context.Context, *api.GetAllReplacementsRequest, []grpc.CallOption) {
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	argsForCall := fake.getChannelEntriesThatReplaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplaceReturns(result1 api.Registry_GetChannelEntriesThatReplaceClient, result2 error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = nil
	fake.getChannelEntriesThatReplaceReturns = struct {
		result1 api.Registry_GetChannelEntriesThatReplaceClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetChannelEntriesThatReplaceReturnsOnCall(i int, result1 api.Registry_GetChannelEntriesThatReplaceClient, result2 error) {
	fake.getChannelEntriesThatReplaceMutex.Lock()
	defer fake.getChannelEntriesThatReplaceMutex.Unlock()
	fake.GetChannelEntriesThatReplaceStub = nil
	if fake.getChannelEntriesThatReplaceReturnsOnCall == nil {
		fake.getChannelEntriesThatReplaceReturnsOnCall = make(map[int]struct {
			result1 api.Registry_GetChannelEntriesThatReplaceClient
			result2 error
		})
	}
	fake.getChannelEntriesThatReplaceReturnsOnCall[i] = struct {
		result1 api.Registry_GetChannelEntriesThatReplaceClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvides(arg1 context.Context, arg2 *api.GetDefaultProviderRequest, arg3 ...grpc.CallOption) (*api.Bundle, error) {
	fake.getDefaultBundleThatProvidesMutex.Lock()
	ret, specificReturn := fake.getDefaultBundleThatProvidesReturnsOnCall[len(fake.getDefaultBundleThatProvidesArgsForCall)]
	fake.getDefaultBundleThatProvidesArgsForCall = append(fake.getDefaultBundleThatProvidesArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetDefaultProviderRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetDefaultBundleThatProvides", []interface{}{arg1, arg2, arg3})
	fake.getDefaultBundleThatProvidesMutex.Unlock()
	if fake.GetDefaultBundleThatProvidesStub != nil {
		return fake.GetDefaultBundleThatProvidesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getDefaultBundleThatProvidesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvidesCallCount() int {
	fake.getDefaultBundleThatProvidesMutex.RLock()
	defer fake.getDefaultBundleThatProvidesMutex.RUnlock()
	return len(fake.getDefaultBundleThatProvidesArgsForCall)
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvidesCalls(stub func(context.Context, *api.GetDefaultProviderRequest, ...grpc.CallOption) (*api.Bundle, error)) {
	fake.getDefaultBundleThatProvidesMutex.Lock()
	defer fake.getDefaultBundleThatProvidesMutex.Unlock()
	fake.GetDefaultBundleThatProvidesStub = stub
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvidesArgsForCall(i int) (context.Context, *api.GetDefaultProviderRequest, []grpc.CallOption) {
	fake.getDefaultBundleThatProvidesMutex.RLock()
	defer fake.getDefaultBundleThatProvidesMutex.RUnlock()
	argsForCall := fake.getDefaultBundleThatProvidesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvidesReturns(result1 *api.Bundle, result2 error) {
	fake.getDefaultBundleThatProvidesMutex.Lock()
	defer fake.getDefaultBundleThatProvidesMutex.Unlock()
	fake.GetDefaultBundleThatProvidesStub = nil
	fake.getDefaultBundleThatProvidesReturns = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetDefaultBundleThatProvidesReturnsOnCall(i int, result1 *api.Bundle, result2 error) {
	fake.getDefaultBundleThatProvidesMutex.Lock()
	defer fake.getDefaultBundleThatProvidesMutex.Unlock()
	fake.GetDefaultBundleThatProvidesStub = nil
	if fake.getDefaultBundleThatProvidesReturnsOnCall == nil {
		fake.getDefaultBundleThatProvidesReturnsOnCall = make(map[int]struct {
			result1 *api.Bundle
			result2 error
		})
	}
	fake.getDefaultBundleThatProvidesReturnsOnCall[i] = struct {
		result1 *api.Bundle
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvide(arg1 context.Context, arg2 *api.GetLatestProvidersRequest, arg3 ...grpc.CallOption) (api.Registry_GetLatestChannelEntriesThatProvideClient, error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	ret, specificReturn := fake.getLatestChannelEntriesThatProvideReturnsOnCall[len(fake.getLatestChannelEntriesThatProvideArgsForCall)]
	fake.getLatestChannelEntriesThatProvideArgsForCall = append(fake.getLatestChannelEntriesThatProvideArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetLatestProvidersRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetLatestChannelEntriesThatProvide", []interface{}{arg1, arg2, arg3})
	fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	if fake.GetLatestChannelEntriesThatProvideStub != nil {
		return fake.GetLatestChannelEntriesThatProvideStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getLatestChannelEntriesThatProvideReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvideCallCount() int {
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	return len(fake.getLatestChannelEntriesThatProvideArgsForCall)
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvideCalls(stub func(context.Context, *api.GetLatestProvidersRequest, ...grpc.CallOption) (api.Registry_GetLatestChannelEntriesThatProvideClient, error)) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = stub
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvideArgsForCall(i int) (context.Context, *api.GetLatestProvidersRequest, []grpc.CallOption) {
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	argsForCall := fake.getLatestChannelEntriesThatProvideArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvideReturns(result1 api.Registry_GetLatestChannelEntriesThatProvideClient, result2 error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = nil
	fake.getLatestChannelEntriesThatProvideReturns = struct {
		result1 api.Registry_GetLatestChannelEntriesThatProvideClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetLatestChannelEntriesThatProvideReturnsOnCall(i int, result1 api.Registry_GetLatestChannelEntriesThatProvideClient, result2 error) {
	fake.getLatestChannelEntriesThatProvideMutex.Lock()
	defer fake.getLatestChannelEntriesThatProvideMutex.Unlock()
	fake.GetLatestChannelEntriesThatProvideStub = nil
	if fake.getLatestChannelEntriesThatProvideReturnsOnCall == nil {
		fake.getLatestChannelEntriesThatProvideReturnsOnCall = make(map[int]struct {
			result1 api.Registry_GetLatestChannelEntriesThatProvideClient
			result2 error
		})
	}
	fake.getLatestChannelEntriesThatProvideReturnsOnCall[i] = struct {
		result1 api.Registry_GetLatestChannelEntriesThatProvideClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetPackage(arg1 context.Context, arg2 *api.GetPackageRequest, arg3 ...grpc.CallOption) (*api.Package, error) {
	fake.getPackageMutex.Lock()
	ret, specificReturn := fake.getPackageReturnsOnCall[len(fake.getPackageArgsForCall)]
	fake.getPackageArgsForCall = append(fake.getPackageArgsForCall, struct {
		arg1 context.Context
		arg2 *api.GetPackageRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetPackage", []interface{}{arg1, arg2, arg3})
	fake.getPackageMutex.Unlock()
	if fake.GetPackageStub != nil {
		return fake.GetPackageStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPackageReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) GetPackageCallCount() int {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	return len(fake.getPackageArgsForCall)
}

func (fake *FakeRegistryClient) GetPackageCalls(stub func(context.Context, *api.GetPackageRequest, ...grpc.CallOption) (*api.Package, error)) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = stub
}

func (fake *FakeRegistryClient) GetPackageArgsForCall(i int) (context.Context, *api.GetPackageRequest, []grpc.CallOption) {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	argsForCall := fake.getPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) GetPackageReturns(result1 *api.Package, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	fake.getPackageReturns = struct {
		result1 *api.Package
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) GetPackageReturnsOnCall(i int, result1 *api.Package, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	if fake.getPackageReturnsOnCall == nil {
		fake.getPackageReturnsOnCall = make(map[int]struct {
			result1 *api.Package
			result2 error
		})
	}
	fake.getPackageReturnsOnCall[i] = struct {
		result1 *api.Package
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ListBundles(arg1 context.Context, arg2 *api.ListBundlesRequest, arg3 ...grpc.CallOption) (api.Registry_ListBundlesClient, error) {
	fake.listBundlesMutex.Lock()
	ret, specificReturn := fake.listBundlesReturnsOnCall[len(fake.listBundlesArgsForCall)]
	fake.listBundlesArgsForCall = append(fake.listBundlesArgsForCall, struct {
		arg1 context.Context
		arg2 *api.ListBundlesRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListBundles", []interface{}{arg1, arg2, arg3})
	fake.listBundlesMutex.Unlock()
	if fake.ListBundlesStub != nil {
		return fake.ListBundlesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listBundlesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) ListBundlesCallCount() int {
	fake.listBundlesMutex.RLock()
	defer fake.listBundlesMutex.RUnlock()
	return len(fake.listBundlesArgsForCall)
}

func (fake *FakeRegistryClient) ListBundlesCalls(stub func(context.Context, *api.ListBundlesRequest, ...grpc.CallOption) (api.Registry_ListBundlesClient, error)) {
	fake.listBundlesMutex.Lock()
	defer fake.listBundlesMutex.Unlock()
	fake.ListBundlesStub = stub
}

func (fake *FakeRegistryClient) ListBundlesArgsForCall(i int) (context.Context, *api.ListBundlesRequest, []grpc.CallOption) {
	fake.listBundlesMutex.RLock()
	defer fake.listBundlesMutex.RUnlock()
	argsForCall := fake.listBundlesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) ListBundlesReturns(result1 api.Registry_ListBundlesClient, result2 error) {
	fake.listBundlesMutex.Lock()
	defer fake.listBundlesMutex.Unlock()
	fake.ListBundlesStub = nil
	fake.listBundlesReturns = struct {
		result1 api.Registry_ListBundlesClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ListBundlesReturnsOnCall(i int, result1 api.Registry_ListBundlesClient, result2 error) {
	fake.listBundlesMutex.Lock()
	defer fake.listBundlesMutex.Unlock()
	fake.ListBundlesStub = nil
	if fake.listBundlesReturnsOnCall == nil {
		fake.listBundlesReturnsOnCall = make(map[int]struct {
			result1 api.Registry_ListBundlesClient
			result2 error
		})
	}
	fake.listBundlesReturnsOnCall[i] = struct {
		result1 api.Registry_ListBundlesClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ListPackages(arg1 context.Context, arg2 *api.ListPackageRequest, arg3 ...grpc.CallOption) (api.Registry_ListPackagesClient, error) {
	fake.listPackagesMutex.Lock()
	ret, specificReturn := fake.listPackagesReturnsOnCall[len(fake.listPackagesArgsForCall)]
	fake.listPackagesArgsForCall = append(fake.listPackagesArgsForCall, struct {
		arg1 context.Context
		arg2 *api.ListPackageRequest
		arg3 []grpc.CallOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListPackages", []interface{}{arg1, arg2, arg3})
	fake.listPackagesMutex.Unlock()
	if fake.ListPackagesStub != nil {
		return fake.ListPackagesStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPackagesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRegistryClient) ListPackagesCallCount() int {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	return len(fake.listPackagesArgsForCall)
}

func (fake *FakeRegistryClient) ListPackagesCalls(stub func(context.Context, *api.ListPackageRequest, ...grpc.CallOption) (api.Registry_ListPackagesClient, error)) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = stub
}

func (fake *FakeRegistryClient) ListPackagesArgsForCall(i int) (context.Context, *api.ListPackageRequest, []grpc.CallOption) {
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	argsForCall := fake.listPackagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeRegistryClient) ListPackagesReturns(result1 api.Registry_ListPackagesClient, result2 error) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = nil
	fake.listPackagesReturns = struct {
		result1 api.Registry_ListPackagesClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) ListPackagesReturnsOnCall(i int, result1 api.Registry_ListPackagesClient, result2 error) {
	fake.listPackagesMutex.Lock()
	defer fake.listPackagesMutex.Unlock()
	fake.ListPackagesStub = nil
	if fake.listPackagesReturnsOnCall == nil {
		fake.listPackagesReturnsOnCall = make(map[int]struct {
			result1 api.Registry_ListPackagesClient
			result2 error
		})
	}
	fake.listPackagesReturnsOnCall[i] = struct {
		result1 api.Registry_ListPackagesClient
		result2 error
	}{result1, result2}
}

func (fake *FakeRegistryClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBundleMutex.RLock()
	defer fake.getBundleMutex.RUnlock()
	fake.getBundleForChannelMutex.RLock()
	defer fake.getBundleForChannelMutex.RUnlock()
	fake.getBundleThatReplacesMutex.RLock()
	defer fake.getBundleThatReplacesMutex.RUnlock()
	fake.getChannelEntriesThatProvideMutex.RLock()
	defer fake.getChannelEntriesThatProvideMutex.RUnlock()
	fake.getChannelEntriesThatReplaceMutex.RLock()
	defer fake.getChannelEntriesThatReplaceMutex.RUnlock()
	fake.getDefaultBundleThatProvidesMutex.RLock()
	defer fake.getDefaultBundleThatProvidesMutex.RUnlock()
	fake.getLatestChannelEntriesThatProvideMutex.RLock()
	defer fake.getLatestChannelEntriesThatProvideMutex.RUnlock()
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	fake.listBundlesMutex.RLock()
	defer fake.listBundlesMutex.RUnlock()
	fake.listPackagesMutex.RLock()
	defer fake.listPackagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRegistryClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.RegistryClient = new(FakeRegistryClient)
