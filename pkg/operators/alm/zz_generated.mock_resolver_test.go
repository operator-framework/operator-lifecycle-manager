// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coreos-inc/alm/pkg/install (interfaces: StrategyResolverInterface)

// Package alm is a generated GoMock package.
package alm

import (
	reflect "reflect"

	v1alpha1 "github.com/coreos-inc/alm/pkg/apis/clusterserviceversion/v1alpha1"
	install "github.com/coreos-inc/alm/pkg/install"
	client "github.com/coreos-inc/operator-client/pkg/client"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockStrategyResolverInterface is a mock of StrategyResolverInterface interface
type MockStrategyResolverInterface struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyResolverInterfaceMockRecorder
}

// MockStrategyResolverInterfaceMockRecorder is the mock recorder for MockStrategyResolverInterface
type MockStrategyResolverInterfaceMockRecorder struct {
	mock *MockStrategyResolverInterface
}

// NewMockStrategyResolverInterface creates a new mock instance
func NewMockStrategyResolverInterface(ctrl *gomock.Controller) *MockStrategyResolverInterface {
	mock := &MockStrategyResolverInterface{ctrl: ctrl}
	mock.recorder = &MockStrategyResolverInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStrategyResolverInterface) EXPECT() *MockStrategyResolverInterfaceMockRecorder {
	return m.recorder
}

// InstallerForStrategy mocks base method
func (m *MockStrategyResolverInterface) InstallerForStrategy(arg0 string, arg1 client.Interface, arg2 v1.ObjectMeta) install.StrategyInstaller {
	ret := m.ctrl.Call(m, "InstallerForStrategy", arg0, arg1, arg2)
	ret0, _ := ret[0].(install.StrategyInstaller)
	return ret0
}

// InstallerForStrategy indicates an expected call of InstallerForStrategy
func (mr *MockStrategyResolverInterfaceMockRecorder) InstallerForStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallerForStrategy", reflect.TypeOf((*MockStrategyResolverInterface)(nil).InstallerForStrategy), arg0, arg1, arg2)
}

// UnmarshalStrategy mocks base method
func (m *MockStrategyResolverInterface) UnmarshalStrategy(arg0 v1alpha1.NamedInstallStrategy) (install.Strategy, error) {
	ret := m.ctrl.Call(m, "UnmarshalStrategy", arg0)
	ret0, _ := ret[0].(install.Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnmarshalStrategy indicates an expected call of UnmarshalStrategy
func (mr *MockStrategyResolverInterfaceMockRecorder) UnmarshalStrategy(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalStrategy", reflect.TypeOf((*MockStrategyResolverInterface)(nil).UnmarshalStrategy), arg0)
}
