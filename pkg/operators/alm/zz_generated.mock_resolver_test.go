// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/coreos-inc/alm/pkg/install (interfaces: StrategyResolverInterface)

package alm

import (
	v1alpha1 "github.com/coreos-inc/alm/pkg/apis/clusterserviceversion/v1alpha1"
	install "github.com/coreos-inc/alm/pkg/install"
	client "github.com/coreos-inc/tectonic-operators/operator-client/pkg/client"
	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Mock of StrategyResolverInterface interface
type MockStrategyResolverInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockStrategyResolverInterfaceRecorder
}

// Recorder for MockStrategyResolverInterface (not exported)
type _MockStrategyResolverInterfaceRecorder struct {
	mock *MockStrategyResolverInterface
}

func NewMockStrategyResolverInterface(ctrl *gomock.Controller) *MockStrategyResolverInterface {
	mock := &MockStrategyResolverInterface{ctrl: ctrl}
	mock.recorder = &_MockStrategyResolverInterfaceRecorder{mock}
	return mock
}

func (_m *MockStrategyResolverInterface) EXPECT() *_MockStrategyResolverInterfaceRecorder {
	return _m.recorder
}

func (_m *MockStrategyResolverInterface) InstallerForStrategy(_param0 string, _param1 client.Interface, _param2 v1.ObjectMeta) install.StrategyInstaller {
	ret := _m.ctrl.Call(_m, "InstallerForStrategy", _param0, _param1, _param2)
	ret0, _ := ret[0].(install.StrategyInstaller)
	return ret0
}

func (_mr *_MockStrategyResolverInterfaceRecorder) InstallerForStrategy(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallerForStrategy", arg0, arg1, arg2)
}

func (_m *MockStrategyResolverInterface) UnmarshalStrategy(_param0 v1alpha1.NamedInstallStrategy) (install.Strategy, error) {
	ret := _m.ctrl.Call(_m, "UnmarshalStrategy", _param0)
	ret0, _ := ret[0].(install.Strategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockStrategyResolverInterfaceRecorder) UnmarshalStrategy(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnmarshalStrategy", arg0)
}
