// Code generated by counterfeiter. DO NOT EDIT.
package operatorlisterfakes

import (
	"sync"

	"github.com/operator-framework/operator-lifecycle-manager/pkg/lib/operatorlister"
	"k8s.io/client-go/metadata/metadatalister"
)

type FakeAPIExtensionsV1Lister struct {
	CustomResourceDefinitionListerStub        func() metadatalister.Lister
	customResourceDefinitionListerMutex       sync.RWMutex
	customResourceDefinitionListerArgsForCall []struct {
	}
	customResourceDefinitionListerReturns struct {
		result1 metadatalister.Lister
	}
	customResourceDefinitionListerReturnsOnCall map[int]struct {
		result1 metadatalister.Lister
	}
	RegisterCustomResourceDefinitionListerStub        func(metadatalister.Lister)
	registerCustomResourceDefinitionListerMutex       sync.RWMutex
	registerCustomResourceDefinitionListerArgsForCall []struct {
		arg1 metadatalister.Lister
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPIExtensionsV1Lister) CustomResourceDefinitionLister() metadatalister.Lister {
	fake.customResourceDefinitionListerMutex.Lock()
	ret, specificReturn := fake.customResourceDefinitionListerReturnsOnCall[len(fake.customResourceDefinitionListerArgsForCall)]
	fake.customResourceDefinitionListerArgsForCall = append(fake.customResourceDefinitionListerArgsForCall, struct {
	}{})
	fake.recordInvocation("CustomResourceDefinitionLister", []interface{}{})
	fake.customResourceDefinitionListerMutex.Unlock()
	if fake.CustomResourceDefinitionListerStub != nil {
		return fake.CustomResourceDefinitionListerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.customResourceDefinitionListerReturns
	return fakeReturns.result1
}

func (fake *FakeAPIExtensionsV1Lister) CustomResourceDefinitionListerCallCount() int {
	fake.customResourceDefinitionListerMutex.RLock()
	defer fake.customResourceDefinitionListerMutex.RUnlock()
	return len(fake.customResourceDefinitionListerArgsForCall)
}

func (fake *FakeAPIExtensionsV1Lister) CustomResourceDefinitionListerCalls(stub func() metadatalister.Lister) {
	fake.customResourceDefinitionListerMutex.Lock()
	defer fake.customResourceDefinitionListerMutex.Unlock()
	fake.CustomResourceDefinitionListerStub = stub
}

func (fake *FakeAPIExtensionsV1Lister) CustomResourceDefinitionListerReturns(result1 metadatalister.Lister) {
	fake.customResourceDefinitionListerMutex.Lock()
	defer fake.customResourceDefinitionListerMutex.Unlock()
	fake.CustomResourceDefinitionListerStub = nil
	fake.customResourceDefinitionListerReturns = struct {
		result1 metadatalister.Lister
	}{result1}
}

func (fake *FakeAPIExtensionsV1Lister) CustomResourceDefinitionListerReturnsOnCall(i int, result1 metadatalister.Lister) {
	fake.customResourceDefinitionListerMutex.Lock()
	defer fake.customResourceDefinitionListerMutex.Unlock()
	fake.CustomResourceDefinitionListerStub = nil
	if fake.customResourceDefinitionListerReturnsOnCall == nil {
		fake.customResourceDefinitionListerReturnsOnCall = make(map[int]struct {
			result1 metadatalister.Lister
		})
	}
	fake.customResourceDefinitionListerReturnsOnCall[i] = struct {
		result1 metadatalister.Lister
	}{result1}
}

func (fake *FakeAPIExtensionsV1Lister) RegisterCustomResourceDefinitionLister(arg1 metadatalister.Lister) {
	fake.registerCustomResourceDefinitionListerMutex.Lock()
	fake.registerCustomResourceDefinitionListerArgsForCall = append(fake.registerCustomResourceDefinitionListerArgsForCall, struct {
		arg1 metadatalister.Lister
	}{arg1})
	fake.recordInvocation("RegisterCustomResourceDefinitionLister", []interface{}{arg1})
	fake.registerCustomResourceDefinitionListerMutex.Unlock()
	if fake.RegisterCustomResourceDefinitionListerStub != nil {
		fake.RegisterCustomResourceDefinitionListerStub(arg1)
	}
}

func (fake *FakeAPIExtensionsV1Lister) RegisterCustomResourceDefinitionListerCallCount() int {
	fake.registerCustomResourceDefinitionListerMutex.RLock()
	defer fake.registerCustomResourceDefinitionListerMutex.RUnlock()
	return len(fake.registerCustomResourceDefinitionListerArgsForCall)
}

func (fake *FakeAPIExtensionsV1Lister) RegisterCustomResourceDefinitionListerCalls(stub func(metadatalister.Lister)) {
	fake.registerCustomResourceDefinitionListerMutex.Lock()
	defer fake.registerCustomResourceDefinitionListerMutex.Unlock()
	fake.RegisterCustomResourceDefinitionListerStub = stub
}

func (fake *FakeAPIExtensionsV1Lister) RegisterCustomResourceDefinitionListerArgsForCall(i int) metadatalister.Lister {
	fake.registerCustomResourceDefinitionListerMutex.RLock()
	defer fake.registerCustomResourceDefinitionListerMutex.RUnlock()
	argsForCall := fake.registerCustomResourceDefinitionListerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAPIExtensionsV1Lister) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.customResourceDefinitionListerMutex.RLock()
	defer fake.customResourceDefinitionListerMutex.RUnlock()
	fake.registerCustomResourceDefinitionListerMutex.RLock()
	defer fake.registerCustomResourceDefinitionListerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPIExtensionsV1Lister) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ operatorlister.APIExtensionsV1Lister = new(FakeAPIExtensionsV1Lister)
