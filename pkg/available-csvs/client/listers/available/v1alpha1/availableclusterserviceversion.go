/*
Copyright Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/operator-framework/operator-lifecycle-manager/pkg/available-csvs/apis/available/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AvailableClusterServiceVersionLister helps list AvailableClusterServiceVersions.
// All objects returned here must be treated as read-only.
type AvailableClusterServiceVersionLister interface {
	// List lists all AvailableClusterServiceVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AvailableClusterServiceVersion, err error)
	// AvailableClusterServiceVersions returns an object that can list and get AvailableClusterServiceVersions.
	AvailableClusterServiceVersions(namespace string) AvailableClusterServiceVersionNamespaceLister
	AvailableClusterServiceVersionListerExpansion
}

// availableClusterServiceVersionLister implements the AvailableClusterServiceVersionLister interface.
type availableClusterServiceVersionLister struct {
	indexer cache.Indexer
}

// NewAvailableClusterServiceVersionLister returns a new AvailableClusterServiceVersionLister.
func NewAvailableClusterServiceVersionLister(indexer cache.Indexer) AvailableClusterServiceVersionLister {
	return &availableClusterServiceVersionLister{indexer: indexer}
}

// List lists all AvailableClusterServiceVersions in the indexer.
func (s *availableClusterServiceVersionLister) List(selector labels.Selector) (ret []*v1alpha1.AvailableClusterServiceVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AvailableClusterServiceVersion))
	})
	return ret, err
}

// AvailableClusterServiceVersions returns an object that can list and get AvailableClusterServiceVersions.
func (s *availableClusterServiceVersionLister) AvailableClusterServiceVersions(namespace string) AvailableClusterServiceVersionNamespaceLister {
	return availableClusterServiceVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AvailableClusterServiceVersionNamespaceLister helps list and get AvailableClusterServiceVersions.
// All objects returned here must be treated as read-only.
type AvailableClusterServiceVersionNamespaceLister interface {
	// List lists all AvailableClusterServiceVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.AvailableClusterServiceVersion, err error)
	// Get retrieves the AvailableClusterServiceVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.AvailableClusterServiceVersion, error)
	AvailableClusterServiceVersionNamespaceListerExpansion
}

// availableClusterServiceVersionNamespaceLister implements the AvailableClusterServiceVersionNamespaceLister
// interface.
type availableClusterServiceVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AvailableClusterServiceVersions in the indexer for a given namespace.
func (s availableClusterServiceVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AvailableClusterServiceVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AvailableClusterServiceVersion))
	})
	return ret, err
}

// Get retrieves the AvailableClusterServiceVersion from the indexer for a given namespace and name.
func (s availableClusterServiceVersionNamespaceLister) Get(name string) (*v1alpha1.AvailableClusterServiceVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("availableclusterserviceversion"), name)
	}
	return obj.(*v1alpha1.AvailableClusterServiceVersion), nil
}
